-- -------------------------------------------------------------
--
-- Module: filterSERIAL
-- Generated by MATLAB(R) 9.2 and the Filter Design HDL Coder 3.1.1.
-- Generated on: 2019-06-06 18:37:07
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: /home/xmont/Desktop/KH
-- Name: filterSERIAL
-- SerialPartition: 5
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 5
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 5
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filterSERIAL IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    real; -- double
         filter_out                      :   OUT   real  -- double
         );

END filterSERIAL;


----------------------------------------------------------------
--Module Architecture: filterSERIAL
----------------------------------------------------------------
ARCHITECTURE rtl OF filterSERIAL IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF real; -- double
  -- Constants
  CONSTANT coeff1                         : real := 5.7512867830429748E-02; -- double
  CONSTANT coeff2                         : real := 2.5547006487104679E-01; -- double
  CONSTANT coeff3                         : real := 3.9044432921018679E-01; -- double
  CONSTANT coeff4                         : real := 2.5547006487104679E-01; -- double
  CONSTANT coeff5                         : real := 5.7512867830429748E-02; -- double

  -- Signals
  SIGNAL cur_count                        : unsigned(2 DOWNTO 0); -- ufix3
  SIGNAL phase_4                          : std_logic; -- boolean
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 4) := (0.0,0.0,0.0,0.0, 0.0); -- double
  SIGNAL inputmux_1                       : real := 0.0; -- double
  SIGNAL acc_final                        : real := 0.0; -- double
  SIGNAL acc_out_1                        : real := 0.0; -- double
  SIGNAL product_1                        : real := 0.0; -- double
  SIGNAL product_1_mux                    : real := 0.0; -- double
  SIGNAL prod_typeconvert_1               : real := 0.0; -- double
  SIGNAL acc_sum_1                        : real := 0.0; -- double
  SIGNAL acc_in_1                         : real := 0.0; -- double
  SIGNAL output_register                  : real := 0.0; -- double


BEGIN

  -- Block Statements
  Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(4, 3);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(4, 3) THEN
          cur_count <= to_unsigned(0, 3);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 3);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter_process;

  phase_4 <= '1' WHEN cur_count = to_unsigned(4, 3) AND clk_enable = '1' ELSE '0';

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 3) AND clk_enable = '1' ELSE '0';

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 4) <= (OTHERS => 0.0000000000000000E+00);
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        delay_pipeline(0) <= filter_in;
        delay_pipeline(1 TO 4) <= delay_pipeline(0 TO 3);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  inputmux_1 <= delay_pipeline(0) WHEN ( cur_count = to_unsigned(0, 3) ) ELSE
                     delay_pipeline(1) WHEN ( cur_count = to_unsigned(1, 3) ) ELSE
                     delay_pipeline(2) WHEN ( cur_count = to_unsigned(2, 3) ) ELSE
                     delay_pipeline(3) WHEN ( cur_count = to_unsigned(3, 3) ) ELSE
                     delay_pipeline(4);

  --   ------------------ Serial partition # 1 ------------------

  product_1_mux <= coeff1 WHEN ( cur_count = to_unsigned(0, 3) ) ELSE
                        coeff2 WHEN ( cur_count = to_unsigned(1, 3) ) ELSE
                        coeff3 WHEN ( cur_count = to_unsigned(2, 3) ) ELSE
                        coeff4 WHEN ( cur_count = to_unsigned(3, 3) ) ELSE
                        coeff5;
  product_1 <= inputmux_1 * product_1_mux;

  prod_typeconvert_1 <= product_1;


  acc_sum_1 <= prod_typeconvert_1 + acc_out_1;

  acc_in_1 <= prod_typeconvert_1 WHEN ( phase_0 = '1' ) ELSE
                   acc_sum_1;

  Acc_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out_1 <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        acc_out_1 <= acc_in_1;
      END IF;
    END IF; 
  END PROCESS Acc_reg_1_process;

  Finalsum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_final <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        acc_final <= acc_out_1;
      END IF;
    END IF; 
  END PROCESS Finalsum_reg_process;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        output_register <= acc_final;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= output_register;
END rtl;
